// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthedRoute component should render itself and children 1`] = `
<Route
  path="blblbl"
  render={[Function]}
/>
`;

exports[`AuthedRoute component should render itself and children when connected 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CookiesProvider
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": false,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
      }
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withCookies(Connect(RawAuthedRoute))
        component={[Function]}
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": false,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
          }
        }
        loginJwt={[MockFunction]}
        loginState={
          Object {
            "loading": false,
            "logged": false,
          }
        }
        path="blblbl"
      >
        <withCookies(Connect(RawAuthedRoute))
          component={[Function]}
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": false,
              "changeListeners": Array [
                [Function],
              ],
              "cookies": Object {},
            }
          }
          forwardedRef={null}
          loginJwt={[MockFunction]}
          loginState={
            Object {
              "loading": false,
              "logged": false,
            }
          }
          path="blblbl"
        >
          <Connect(RawAuthedRoute)
            allCookies={Object {}}
            component={[Function]}
            cookies={
              Cookies {
                "HAS_DOCUMENT_COOKIE": false,
                "changeListeners": Array [
                  [Function],
                ],
                "cookies": Object {},
              }
            }
            loginJwt={[MockFunction]}
            loginState={
              Object {
                "loading": false,
                "logged": false,
              }
            }
            path="blblbl"
          >
            <RawAuthedRoute
              allCookies={Object {}}
              component={[Function]}
              cookies={
                Cookies {
                  "HAS_DOCUMENT_COOKIE": false,
                  "changeListeners": Array [
                    [Function],
                  ],
                  "cookies": Object {},
                }
              }
              loginJwt={[Function]}
              loginState={
                Object {
                  "loading": false,
                  "logged": false,
                }
              }
              path="blblbl"
            >
              <Route
                allCookies={Object {}}
                path="blblbl"
                render={[Function]}
              />
            </RawAuthedRoute>
          </Connect(RawAuthedRoute)>
        </withCookies(Connect(RawAuthedRoute))>
      </withCookies(Connect(RawAuthedRoute))>
    </Router>
  </CookiesProvider>
</Provider>
`;
