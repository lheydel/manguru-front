// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginForm component should render itself and the form 1`] = `
<RawLoginForm
  login={[MockFunction]}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "email": "",
        "password": "",
        "rememberMe": false,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    render={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "password",
          "email",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
              "undefined": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "password": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      noValidate={true}
    >
      <Component
        formik={
          Object {
            "dirty": false,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
              "password": "",
              "rememberMe": false,
            },
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validate": undefined,
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": undefined,
              "_nodes": Array [
                "password",
                "email",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "email": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "required": true,
                    "undefined": false,
                  },
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "password": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "required": true,
                  },
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            },
            "values": Object {
              "email": "",
              "password": "",
              "rememberMe": false,
            },
          }
        }
        noValidate={true}
      >
        <form
          noValidate={true}
          onReset={[Function]}
          onSubmit={[Function]}
        >
           
          <Styled(MuiBox)
            mb={2}
          >
            <div
              className="MuiBox-root MuiBox-root-2"
            >
              <Field
                fieldType="text"
                formikProps={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "values": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                  }
                }
                fullWidth={true}
                label="Email"
                name="email"
                type="email"
                variant="outlined"
              >
                <TextField
                  errors={Object {}}
                  fullWidth={true}
                  handleBlur={[Function]}
                  handleChange={[Function]}
                  label="Email"
                  name="email"
                  touched={Object {}}
                  type="email"
                  values={
                    Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    }
                  }
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(TextField))
                    error={false}
                    fullWidth={true}
                    label="Email"
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="email"
                    value=""
                    variant="outlined"
                  >
                    <ForwardRef(TextField)
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      error={false}
                      fullWidth={true}
                      label="Email"
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="email"
                      value=""
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root"
                        error={false}
                        fullWidth={true}
                        required={false}
                        variant="outlined"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          error={false}
                          fullWidth={true}
                          required={false}
                          variant="outlined"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      data-shrink={false}
                                    >
                                      Email
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(OutlinedInput))
                              fullWidth={true}
                              labelWidth={0}
                              name="email"
                              onBlur={[Function]}
                              onChange={[Function]}
                              type="email"
                              value=""
                            >
                              <ForwardRef(OutlinedInput)
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "inputSelect": "MuiOutlinedInput-inputSelect",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                labelWidth={0}
                                name="email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="email"
                                value=""
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "inputSelect": "MuiOutlinedInput-inputSelect",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": null,
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  multiline={false}
                                  name="email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  renderPrefix={[Function]}
                                  type="email"
                                  value=""
                                >
                                  <ForwardRef(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth",
                                        "input": "MuiInputBase-input MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                        "root": "MuiInputBase-root MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={true}
                                    inputComponent="input"
                                    multiline={false}
                                    name="email"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    renderPrefix={[Function]}
                                    type="email"
                                    value=""
                                  >
                                    <div
                                      className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                      onClick={[Function]}
                                    >
                                      <WithStyles(ForwardRef(NotchedOutline))
                                        className="MuiOutlinedInput-notchedOutline"
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <ForwardRef(NotchedOutline)
                                          className="MuiOutlinedInput-notchedOutline"
                                          classes={
                                            Object {
                                              "legend": "PrivateNotchedOutline-legend-60",
                                              "root": "PrivateNotchedOutline-root-59",
                                            }
                                          }
                                          labelWidth={0}
                                          notched={false}
                                          theme={
                                            Object {
                                              "breakpoints": Object {
                                                "between": [Function],
                                                "down": [Function],
                                                "keys": Array [
                                                  "xs",
                                                  "sm",
                                                  "md",
                                                  "lg",
                                                  "xl",
                                                ],
                                                "only": [Function],
                                                "up": [Function],
                                                "values": Object {
                                                  "lg": 1280,
                                                  "md": 960,
                                                  "sm": 600,
                                                  "xl": 1920,
                                                  "xs": 0,
                                                },
                                                "width": [Function],
                                              },
                                              "direction": "ltr",
                                              "mixins": Object {
                                                "gutters": [Function],
                                                "toolbar": Object {
                                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                                    "minHeight": 48,
                                                  },
                                                  "@media (min-width:600px)": Object {
                                                    "minHeight": 64,
                                                  },
                                                  "minHeight": 56,
                                                },
                                              },
                                              "overrides": Object {},
                                              "palette": Object {
                                                "action": Object {
                                                  "active": "rgba(0, 0, 0, 0.54)",
                                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                  "hover": "rgba(0, 0, 0, 0.08)",
                                                  "hoverOpacity": 0.08,
                                                  "selected": "rgba(0, 0, 0, 0.14)",
                                                },
                                                "augmentColor": [Function],
                                                "background": Object {
                                                  "default": "#fafafa",
                                                  "paper": "#fff",
                                                },
                                                "common": Object {
                                                  "black": "#000",
                                                  "white": "#fff",
                                                },
                                                "contrastThreshold": 3,
                                                "divider": "rgba(0, 0, 0, 0.12)",
                                                "error": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#d32f2f",
                                                  "light": "#e57373",
                                                  "main": "#f44336",
                                                },
                                                "getContrastText": [Function],
                                                "grey": Object {
                                                  "100": "#f5f5f5",
                                                  "200": "#eeeeee",
                                                  "300": "#e0e0e0",
                                                  "400": "#bdbdbd",
                                                  "50": "#fafafa",
                                                  "500": "#9e9e9e",
                                                  "600": "#757575",
                                                  "700": "#616161",
                                                  "800": "#424242",
                                                  "900": "#212121",
                                                  "A100": "#d5d5d5",
                                                  "A200": "#aaaaaa",
                                                  "A400": "#303030",
                                                  "A700": "#616161",
                                                },
                                                "primary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#303f9f",
                                                  "light": "#7986cb",
                                                  "main": "#3f51b5",
                                                },
                                                "secondary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#c51162",
                                                  "light": "#ff4081",
                                                  "main": "#f50057",
                                                },
                                                "text": Object {
                                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                                  "hint": "rgba(0, 0, 0, 0.38)",
                                                  "primary": "rgba(0, 0, 0, 0.87)",
                                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                                },
                                                "tonalOffset": 0.2,
                                                "type": "light",
                                              },
                                              "props": Object {},
                                              "shadows": Array [
                                                "none",
                                                "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                              ],
                                              "shape": Object {
                                                "borderRadius": 4,
                                              },
                                              "spacing": [Function],
                                              "transitions": Object {
                                                "create": [Function],
                                                "duration": Object {
                                                  "complex": 375,
                                                  "enteringScreen": 225,
                                                  "leavingScreen": 195,
                                                  "short": 250,
                                                  "shorter": 200,
                                                  "shortest": 150,
                                                  "standard": 300,
                                                },
                                                "easing": Object {
                                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                },
                                                "getAutoHeightDuration": [Function],
                                              },
                                              "typography": Object {
                                                "body1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.5,
                                                },
                                                "body2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.01071em",
                                                  "lineHeight": 1.43,
                                                },
                                                "button": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.02857em",
                                                  "lineHeight": 1.75,
                                                  "textTransform": "uppercase",
                                                },
                                                "caption": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.03333em",
                                                  "lineHeight": 1.66,
                                                },
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": 14,
                                                "fontWeightBold": 700,
                                                "fontWeightLight": 300,
                                                "fontWeightMedium": 500,
                                                "fontWeightRegular": 400,
                                                "h1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "6rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.01562em",
                                                  "lineHeight": 1,
                                                },
                                                "h2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3.75rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.00833em",
                                                  "lineHeight": 1,
                                                },
                                                "h3": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.04,
                                                },
                                                "h4": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "2.125rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00735em",
                                                  "lineHeight": 1.17,
                                                },
                                                "h5": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.5rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.33,
                                                },
                                                "h6": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.25rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.0075em",
                                                  "lineHeight": 1.6,
                                                },
                                                "htmlFontSize": 16,
                                                "overline": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.08333em",
                                                  "lineHeight": 2.66,
                                                  "textTransform": "uppercase",
                                                },
                                                "pxToRem": [Function],
                                                "round": [Function],
                                                "subtitle1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.75,
                                                },
                                                "subtitle2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.00714em",
                                                  "lineHeight": 1.57,
                                                },
                                              },
                                              "zIndex": Object {
                                                "appBar": 1100,
                                                "drawer": 1200,
                                                "mobileStepper": 1000,
                                                "modal": 1300,
                                                "snackbar": 1400,
                                                "tooltip": 1500,
                                              },
                                            }
                                          }
                                        >
                                          <fieldset
                                            aria-hidden={true}
                                            className="PrivateNotchedOutline-root-59 MuiOutlinedInput-notchedOutline"
                                            style={
                                              Object {
                                                "paddingLeft": 8,
                                              }
                                            }
                                          >
                                            <legend
                                              className="PrivateNotchedOutline-legend-60"
                                              style={
                                                Object {
                                                  "width": 0.01,
                                                }
                                              }
                                            >
                                              <span
                                                dangerouslySetInnerHTML={
                                                  Object {
                                                    "__html": "&#8203;",
                                                  }
                                                }
                                              />
                                            </legend>
                                          </fieldset>
                                        </ForwardRef(NotchedOutline)>
                                      </WithStyles(ForwardRef(NotchedOutline))>
                                      <input
                                        aria-invalid={false}
                                        className="MuiInputBase-input MuiOutlinedInput-input"
                                        disabled={false}
                                        name="email"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        type="email"
                                        value=""
                                      />
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(OutlinedInput)>
                            </WithStyles(ForwardRef(OutlinedInput))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                </TextField>
              </Field>
            </div>
          </Styled(MuiBox)>
          <Styled(MuiBox)
            mb={2}
          >
            <div
              className="MuiBox-root MuiBox-root-61"
            >
              <Field
                fieldType="text"
                formikProps={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "values": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                  }
                }
                fullWidth={true}
                label="Password"
                name="password"
                type="password"
                variant="outlined"
              >
                <TextField
                  errors={Object {}}
                  fullWidth={true}
                  handleBlur={[Function]}
                  handleChange={[Function]}
                  label="Password"
                  name="password"
                  touched={Object {}}
                  type="password"
                  values={
                    Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    }
                  }
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(TextField))
                    error={false}
                    fullWidth={true}
                    label="Password"
                    name="password"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="password"
                    value=""
                    variant="outlined"
                  >
                    <ForwardRef(TextField)
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      error={false}
                      fullWidth={true}
                      label="Password"
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      value=""
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root"
                        error={false}
                        fullWidth={true}
                        required={false}
                        variant="outlined"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          error={false}
                          fullWidth={true}
                          required={false}
                          variant="outlined"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      data-shrink={false}
                                    >
                                      Password
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(OutlinedInput))
                              fullWidth={true}
                              labelWidth={0}
                              name="password"
                              onBlur={[Function]}
                              onChange={[Function]}
                              type="password"
                              value=""
                            >
                              <ForwardRef(OutlinedInput)
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "inputSelect": "MuiOutlinedInput-inputSelect",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                labelWidth={0}
                                name="password"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="password"
                                value=""
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "inputSelect": "MuiOutlinedInput-inputSelect",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": null,
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  multiline={false}
                                  name="password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  renderPrefix={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <ForwardRef(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth",
                                        "input": "MuiInputBase-input MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                        "root": "MuiInputBase-root MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={true}
                                    inputComponent="input"
                                    multiline={false}
                                    name="password"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    renderPrefix={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <div
                                      className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                      onClick={[Function]}
                                    >
                                      <WithStyles(ForwardRef(NotchedOutline))
                                        className="MuiOutlinedInput-notchedOutline"
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <ForwardRef(NotchedOutline)
                                          className="MuiOutlinedInput-notchedOutline"
                                          classes={
                                            Object {
                                              "legend": "PrivateNotchedOutline-legend-60",
                                              "root": "PrivateNotchedOutline-root-59",
                                            }
                                          }
                                          labelWidth={0}
                                          notched={false}
                                          theme={
                                            Object {
                                              "breakpoints": Object {
                                                "between": [Function],
                                                "down": [Function],
                                                "keys": Array [
                                                  "xs",
                                                  "sm",
                                                  "md",
                                                  "lg",
                                                  "xl",
                                                ],
                                                "only": [Function],
                                                "up": [Function],
                                                "values": Object {
                                                  "lg": 1280,
                                                  "md": 960,
                                                  "sm": 600,
                                                  "xl": 1920,
                                                  "xs": 0,
                                                },
                                                "width": [Function],
                                              },
                                              "direction": "ltr",
                                              "mixins": Object {
                                                "gutters": [Function],
                                                "toolbar": Object {
                                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                                    "minHeight": 48,
                                                  },
                                                  "@media (min-width:600px)": Object {
                                                    "minHeight": 64,
                                                  },
                                                  "minHeight": 56,
                                                },
                                              },
                                              "overrides": Object {},
                                              "palette": Object {
                                                "action": Object {
                                                  "active": "rgba(0, 0, 0, 0.54)",
                                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                  "hover": "rgba(0, 0, 0, 0.08)",
                                                  "hoverOpacity": 0.08,
                                                  "selected": "rgba(0, 0, 0, 0.14)",
                                                },
                                                "augmentColor": [Function],
                                                "background": Object {
                                                  "default": "#fafafa",
                                                  "paper": "#fff",
                                                },
                                                "common": Object {
                                                  "black": "#000",
                                                  "white": "#fff",
                                                },
                                                "contrastThreshold": 3,
                                                "divider": "rgba(0, 0, 0, 0.12)",
                                                "error": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#d32f2f",
                                                  "light": "#e57373",
                                                  "main": "#f44336",
                                                },
                                                "getContrastText": [Function],
                                                "grey": Object {
                                                  "100": "#f5f5f5",
                                                  "200": "#eeeeee",
                                                  "300": "#e0e0e0",
                                                  "400": "#bdbdbd",
                                                  "50": "#fafafa",
                                                  "500": "#9e9e9e",
                                                  "600": "#757575",
                                                  "700": "#616161",
                                                  "800": "#424242",
                                                  "900": "#212121",
                                                  "A100": "#d5d5d5",
                                                  "A200": "#aaaaaa",
                                                  "A400": "#303030",
                                                  "A700": "#616161",
                                                },
                                                "primary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#303f9f",
                                                  "light": "#7986cb",
                                                  "main": "#3f51b5",
                                                },
                                                "secondary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#c51162",
                                                  "light": "#ff4081",
                                                  "main": "#f50057",
                                                },
                                                "text": Object {
                                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                                  "hint": "rgba(0, 0, 0, 0.38)",
                                                  "primary": "rgba(0, 0, 0, 0.87)",
                                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                                },
                                                "tonalOffset": 0.2,
                                                "type": "light",
                                              },
                                              "props": Object {},
                                              "shadows": Array [
                                                "none",
                                                "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                              ],
                                              "shape": Object {
                                                "borderRadius": 4,
                                              },
                                              "spacing": [Function],
                                              "transitions": Object {
                                                "create": [Function],
                                                "duration": Object {
                                                  "complex": 375,
                                                  "enteringScreen": 225,
                                                  "leavingScreen": 195,
                                                  "short": 250,
                                                  "shorter": 200,
                                                  "shortest": 150,
                                                  "standard": 300,
                                                },
                                                "easing": Object {
                                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                },
                                                "getAutoHeightDuration": [Function],
                                              },
                                              "typography": Object {
                                                "body1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.5,
                                                },
                                                "body2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.01071em",
                                                  "lineHeight": 1.43,
                                                },
                                                "button": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.02857em",
                                                  "lineHeight": 1.75,
                                                  "textTransform": "uppercase",
                                                },
                                                "caption": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.03333em",
                                                  "lineHeight": 1.66,
                                                },
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": 14,
                                                "fontWeightBold": 700,
                                                "fontWeightLight": 300,
                                                "fontWeightMedium": 500,
                                                "fontWeightRegular": 400,
                                                "h1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "6rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.01562em",
                                                  "lineHeight": 1,
                                                },
                                                "h2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3.75rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.00833em",
                                                  "lineHeight": 1,
                                                },
                                                "h3": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.04,
                                                },
                                                "h4": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "2.125rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00735em",
                                                  "lineHeight": 1.17,
                                                },
                                                "h5": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.5rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.33,
                                                },
                                                "h6": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.25rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.0075em",
                                                  "lineHeight": 1.6,
                                                },
                                                "htmlFontSize": 16,
                                                "overline": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.08333em",
                                                  "lineHeight": 2.66,
                                                  "textTransform": "uppercase",
                                                },
                                                "pxToRem": [Function],
                                                "round": [Function],
                                                "subtitle1": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.75,
                                                },
                                                "subtitle2": Object {
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.00714em",
                                                  "lineHeight": 1.57,
                                                },
                                              },
                                              "zIndex": Object {
                                                "appBar": 1100,
                                                "drawer": 1200,
                                                "mobileStepper": 1000,
                                                "modal": 1300,
                                                "snackbar": 1400,
                                                "tooltip": 1500,
                                              },
                                            }
                                          }
                                        >
                                          <fieldset
                                            aria-hidden={true}
                                            className="PrivateNotchedOutline-root-59 MuiOutlinedInput-notchedOutline"
                                            style={
                                              Object {
                                                "paddingLeft": 8,
                                              }
                                            }
                                          >
                                            <legend
                                              className="PrivateNotchedOutline-legend-60"
                                              style={
                                                Object {
                                                  "width": 0.01,
                                                }
                                              }
                                            >
                                              <span
                                                dangerouslySetInnerHTML={
                                                  Object {
                                                    "__html": "&#8203;",
                                                  }
                                                }
                                              />
                                            </legend>
                                          </fieldset>
                                        </ForwardRef(NotchedOutline)>
                                      </WithStyles(ForwardRef(NotchedOutline))>
                                      <input
                                        aria-invalid={false}
                                        className="MuiInputBase-input MuiOutlinedInput-input"
                                        disabled={false}
                                        name="password"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        type="password"
                                        value=""
                                      />
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(OutlinedInput)>
                            </WithStyles(ForwardRef(OutlinedInput))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                </TextField>
              </Field>
            </div>
          </Styled(MuiBox)>
          <WithStyles(ForwardRef(FormControlLabel))
            control={
              <Field
                color="primary"
                fieldType="checkbox"
                formikProps={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "values": Object {
                      "email": "",
                      "password": "",
                      "rememberMe": false,
                    },
                  }
                }
                name="rememberMe"
              />
            }
            label="Remember me"
          >
            <ForwardRef(FormControlLabel)
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "label": "MuiFormControlLabel-label",
                  "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                  "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                  "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                  "root": "MuiFormControlLabel-root",
                }
              }
              control={
                <Field
                  color="primary"
                  fieldType="checkbox"
                  formikProps={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "email": "",
                        "password": "",
                        "rememberMe": false,
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "values": Object {
                        "email": "",
                        "password": "",
                        "rememberMe": false,
                      },
                    }
                  }
                  name="rememberMe"
                />
              }
              label="Remember me"
            >
              <label
                className="MuiFormControlLabel-root"
              >
                <Field
                  color="primary"
                  fieldType="checkbox"
                  formikProps={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "email": "",
                        "password": "",
                        "rememberMe": false,
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "values": Object {
                        "email": "",
                        "password": "",
                        "rememberMe": false,
                      },
                    }
                  }
                  name="rememberMe"
                >
                  <Checkbox
                    color="primary"
                    handleChange={[Function]}
                    name="rememberMe"
                    values={
                      Object {
                        "email": "",
                        "password": "",
                        "rememberMe": false,
                      }
                    }
                  >
                    <WithStyles(ForwardRef(Checkbox))
                      color="primary"
                      name="rememberMe"
                      onChange={[Function]}
                      value={false}
                    >
                      <ForwardRef(Checkbox)
                        classes={
                          Object {
                            "checked": "Mui-checked",
                            "colorPrimary": "MuiCheckbox-colorPrimary",
                            "colorSecondary": "MuiCheckbox-colorSecondary",
                            "disabled": "Mui-disabled",
                            "indeterminate": "MuiCheckbox-indeterminate",
                            "root": "MuiCheckbox-root",
                          }
                        }
                        color="primary"
                        name="rememberMe"
                        onChange={[Function]}
                        value={false}
                      >
                        <WithStyles(ForwardRef(SwitchBase))
                          checkedIcon={<Memo />}
                          classes={
                            Object {
                              "checked": "Mui-checked",
                              "disabled": "Mui-disabled",
                              "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                            }
                          }
                          color="primary"
                          icon={<Memo />}
                          inputProps={
                            Object {
                              "data-indeterminate": false,
                            }
                          }
                          name="rememberMe"
                          onChange={[Function]}
                          type="checkbox"
                          value={false}
                        >
                          <ForwardRef(SwitchBase)
                            checkedIcon={<Memo />}
                            classes={
                              Object {
                                "checked": "PrivateSwitchBase-checked-75 Mui-checked",
                                "disabled": "PrivateSwitchBase-disabled-76 Mui-disabled",
                                "input": "PrivateSwitchBase-input-77",
                                "root": "PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary",
                              }
                            }
                            color="primary"
                            icon={<Memo />}
                            inputProps={
                              Object {
                                "data-indeterminate": false,
                              }
                            }
                            name="rememberMe"
                            onChange={[Function]}
                            type="checkbox"
                            value={false}
                          >
                            <WithStyles(ForwardRef(IconButton))
                              className="PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary"
                              color="primary"
                              component="span"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <ForwardRef(IconButton)
                                className="PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="primary"
                                component="span"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                tabIndex={null}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  centerRipple={true}
                                  className="MuiIconButton-root PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                  component="span"
                                  disabled={false}
                                  focusRipple={true}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="span"
                                    disabled={false}
                                    focusRipple={true}
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <span
                                      aria-disabled={false}
                                      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-74 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={null}
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <ForwardRef>
                                          <WithStyles(ForwardRef(SvgIcon))>
                                            <ForwardRef(SvgIcon)
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                  "colorError": "MuiSvgIcon-colorError",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                  "root": "MuiSvgIcon-root",
                                                }
                                              }
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root"
                                                focusable="false"
                                                role="presentation"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                />
                                              </svg>
                                            </ForwardRef(SvgIcon)>
                                          </WithStyles(ForwardRef(SvgIcon))>
                                        </ForwardRef>
                                        <input
                                          className="PrivateSwitchBase-input-77"
                                          data-indeterminate={false}
                                          name="rememberMe"
                                          onChange={[Function]}
                                          type="checkbox"
                                          value={false}
                                        />
                                      </span>
                                      <NoSsr>
                                        <WithStyles(undefined)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(undefined)>
                                      </NoSsr>
                                    </span>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </ForwardRef(SwitchBase)>
                        </WithStyles(ForwardRef(SwitchBase))>
                      </ForwardRef(Checkbox)>
                    </WithStyles(ForwardRef(Checkbox))>
                  </Checkbox>
                </Field>
                <WithStyles(ForwardRef(Typography))
                  className="MuiFormControlLabel-label"
                  component="span"
                >
                  <ForwardRef(Typography)
                    className="MuiFormControlLabel-label"
                    classes={
                      Object {
                        "alignCenter": "MuiTypography-alignCenter",
                        "alignJustify": "MuiTypography-alignJustify",
                        "alignLeft": "MuiTypography-alignLeft",
                        "alignRight": "MuiTypography-alignRight",
                        "body1": "MuiTypography-body1",
                        "body2": "MuiTypography-body2",
                        "button": "MuiTypography-button",
                        "caption": "MuiTypography-caption",
                        "colorError": "MuiTypography-colorError",
                        "colorInherit": "MuiTypography-colorInherit",
                        "colorPrimary": "MuiTypography-colorPrimary",
                        "colorSecondary": "MuiTypography-colorSecondary",
                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                        "displayBlock": "MuiTypography-displayBlock",
                        "displayInline": "MuiTypography-displayInline",
                        "gutterBottom": "MuiTypography-gutterBottom",
                        "h1": "MuiTypography-h1",
                        "h2": "MuiTypography-h2",
                        "h3": "MuiTypography-h3",
                        "h4": "MuiTypography-h4",
                        "h5": "MuiTypography-h5",
                        "h6": "MuiTypography-h6",
                        "noWrap": "MuiTypography-noWrap",
                        "overline": "MuiTypography-overline",
                        "paragraph": "MuiTypography-paragraph",
                        "root": "MuiTypography-root",
                        "srOnly": "MuiTypography-srOnly",
                        "subtitle1": "MuiTypography-subtitle1",
                        "subtitle2": "MuiTypography-subtitle2",
                      }
                    }
                    component="span"
                    theme={
                      Object {
                        "breakpoints": Object {
                          "between": [Function],
                          "down": [Function],
                          "keys": Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ],
                          "only": [Function],
                          "up": [Function],
                          "values": Object {
                            "lg": 1280,
                            "md": 960,
                            "sm": 600,
                            "xl": 1920,
                            "xs": 0,
                          },
                          "width": [Function],
                        },
                        "direction": "ltr",
                        "mixins": Object {
                          "gutters": [Function],
                          "toolbar": Object {
                            "@media (min-width:0px) and (orientation: landscape)": Object {
                              "minHeight": 48,
                            },
                            "@media (min-width:600px)": Object {
                              "minHeight": 64,
                            },
                            "minHeight": 56,
                          },
                        },
                        "overrides": Object {},
                        "palette": Object {
                          "action": Object {
                            "active": "rgba(0, 0, 0, 0.54)",
                            "disabled": "rgba(0, 0, 0, 0.26)",
                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                            "hover": "rgba(0, 0, 0, 0.08)",
                            "hoverOpacity": 0.08,
                            "selected": "rgba(0, 0, 0, 0.14)",
                          },
                          "augmentColor": [Function],
                          "background": Object {
                            "default": "#fafafa",
                            "paper": "#fff",
                          },
                          "common": Object {
                            "black": "#000",
                            "white": "#fff",
                          },
                          "contrastThreshold": 3,
                          "divider": "rgba(0, 0, 0, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "getContrastText": [Function],
                          "grey": Object {
                            "100": "#f5f5f5",
                            "200": "#eeeeee",
                            "300": "#e0e0e0",
                            "400": "#bdbdbd",
                            "50": "#fafafa",
                            "500": "#9e9e9e",
                            "600": "#757575",
                            "700": "#616161",
                            "800": "#424242",
                            "900": "#212121",
                            "A100": "#d5d5d5",
                            "A200": "#aaaaaa",
                            "A400": "#303030",
                            "A700": "#616161",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "text": Object {
                            "disabled": "rgba(0, 0, 0, 0.38)",
                            "hint": "rgba(0, 0, 0, 0.38)",
                            "primary": "rgba(0, 0, 0, 0.87)",
                            "secondary": "rgba(0, 0, 0, 0.54)",
                          },
                          "tonalOffset": 0.2,
                          "type": "light",
                        },
                        "props": Object {},
                        "shadows": Array [
                          "none",
                          "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                          "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                          "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                        ],
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": [Function],
                        "transitions": Object {
                          "create": [Function],
                          "duration": Object {
                            "complex": 375,
                            "enteringScreen": 225,
                            "leavingScreen": 195,
                            "short": 250,
                            "shorter": 200,
                            "shortest": 150,
                            "standard": 300,
                          },
                          "easing": Object {
                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                          },
                          "getAutoHeightDuration": [Function],
                        },
                        "typography": Object {
                          "body1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00938em",
                            "lineHeight": 1.5,
                          },
                          "body2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.01071em",
                            "lineHeight": 1.43,
                          },
                          "button": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.02857em",
                            "lineHeight": 1.75,
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.75rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.03333em",
                            "lineHeight": 1.66,
                          },
                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                          "fontSize": 14,
                          "fontWeightBold": 700,
                          "fontWeightLight": 300,
                          "fontWeightMedium": 500,
                          "fontWeightRegular": 400,
                          "h1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "6rem",
                            "fontWeight": 300,
                            "letterSpacing": "-0.01562em",
                            "lineHeight": 1,
                          },
                          "h2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "3.75rem",
                            "fontWeight": 300,
                            "letterSpacing": "-0.00833em",
                            "lineHeight": 1,
                          },
                          "h3": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "3rem",
                            "fontWeight": 400,
                            "letterSpacing": "0em",
                            "lineHeight": 1.04,
                          },
                          "h4": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "2.125rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00735em",
                            "lineHeight": 1.17,
                          },
                          "h5": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1.5rem",
                            "fontWeight": 400,
                            "letterSpacing": "0em",
                            "lineHeight": 1.33,
                          },
                          "h6": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1.25rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.0075em",
                            "lineHeight": 1.6,
                          },
                          "htmlFontSize": 16,
                          "overline": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.75rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.08333em",
                            "lineHeight": 2.66,
                            "textTransform": "uppercase",
                          },
                          "pxToRem": [Function],
                          "round": [Function],
                          "subtitle1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00938em",
                            "lineHeight": 1.75,
                          },
                          "subtitle2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.00714em",
                            "lineHeight": 1.57,
                          },
                        },
                        "zIndex": Object {
                          "appBar": 1100,
                          "drawer": 1200,
                          "mobileStepper": 1000,
                          "modal": 1300,
                          "snackbar": 1400,
                          "tooltip": 1500,
                        },
                      }
                    }
                  >
                    <span
                      className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                    >
                      Remember me
                    </span>
                  </ForwardRef(Typography)>
                </WithStyles(ForwardRef(Typography))>
              </label>
            </ForwardRef(FormControlLabel)>
          </WithStyles(ForwardRef(FormControlLabel))>
          <WithStyles(ForwardRef(Button))
            color="primary"
            fullWidth={true}
            type="submit"
            variant="contained"
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                }
              }
              color="primary"
              fullWidth={true}
              type="submit"
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                type="submit"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  type="submit"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                    disabled={false}
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="submit"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      <WithI18n
                        id="Sign in"
                      >
                        <I18n
                          update={true}
                          withHash={true}
                        >
                          <Trans
                            id="Sign in"
                          >
                            <Render
                              value="Sign in"
                            >
                              Sign in
                            </Render>
                          </Trans>
                        </I18n>
                      </WithI18n>
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </form>
      </Component>
    </Form>
  </Formik>
</RawLoginForm>
`;

exports[`LoginForm component should render itself and the form with redux 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(RawLoginForm)>
    <RawLoginForm
      login={[Function]}
    >
      <Formik
        enableReinitialize={false}
        initialValues={
          Object {
            "email": "",
            "password": "",
            "rememberMe": false,
          }
        }
        isInitialValid={false}
        onSubmit={[Function]}
        render={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        validationSchema={
          ObjectSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_defaultDefault": [Function],
            "_deps": Array [],
            "_excludedEdges": Array [],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_nodes": Array [
              "password",
              "email",
            ],
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "object",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "fields": Object {
              "email": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": true,
                  "undefined": false,
                },
                "_mutate": undefined,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
              "password": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": true,
                },
                "_mutate": undefined,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          }
        }
      >
        <Form
          noValidate={true}
        >
          <Component
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "email": "",
                  "password": "",
                  "rememberMe": false,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": ObjectSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_defaultDefault": [Function],
                  "_deps": Array [],
                  "_excludedEdges": Array [],
                  "_exclusive": Object {},
                  "_mutate": undefined,
                  "_nodes": Array [
                    "password",
                    "email",
                  ],
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "object",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "fields": Object {
                    "email": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": true,
                        "undefined": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                    "password": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": true,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "values": Object {
                  "email": "",
                  "password": "",
                  "rememberMe": false,
                },
              }
            }
            noValidate={true}
          >
            <form
              noValidate={true}
              onReset={[Function]}
              onSubmit={[Function]}
            >
               
              <Styled(MuiBox)
                mb={2}
              >
                <div
                  className="MuiBox-root MuiBox-root-157"
                >
                  <Field
                    fieldType="text"
                    formikProps={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                      }
                    }
                    fullWidth={true}
                    label="Email"
                    name="email"
                    type="email"
                    variant="outlined"
                  >
                    <TextField
                      errors={Object {}}
                      fullWidth={true}
                      handleBlur={[Function]}
                      handleChange={[Function]}
                      label="Email"
                      name="email"
                      touched={Object {}}
                      type="email"
                      values={
                        Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        }
                      }
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(TextField))
                        error={false}
                        fullWidth={true}
                        label="Email"
                        name="email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="email"
                        value=""
                        variant="outlined"
                      >
                        <ForwardRef(TextField)
                          classes={
                            Object {
                              "root": "MuiTextField-root",
                            }
                          }
                          error={false}
                          fullWidth={true}
                          label="Email"
                          name="email"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="email"
                          value=""
                          variant="outlined"
                        >
                          <WithStyles(ForwardRef(FormControl))
                            className="MuiTextField-root"
                            error={false}
                            fullWidth={true}
                            required={false}
                            variant="outlined"
                          >
                            <ForwardRef(FormControl)
                              className="MuiTextField-root"
                              classes={
                                Object {
                                  "fullWidth": "MuiFormControl-fullWidth",
                                  "marginDense": "MuiFormControl-marginDense",
                                  "marginNormal": "MuiFormControl-marginNormal",
                                  "root": "MuiFormControl-root",
                                }
                              }
                              error={false}
                              fullWidth={true}
                              required={false}
                              variant="outlined"
                            >
                              <div
                                className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                              >
                                <WithStyles(ForwardRef(InputLabel))>
                                  <ForwardRef(InputLabel)
                                    classes={
                                      Object {
                                        "animated": "MuiInputLabel-animated",
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "filled": "MuiInputLabel-filled",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInputLabel-formControl",
                                        "marginDense": "MuiInputLabel-marginDense",
                                        "outlined": "MuiInputLabel-outlined",
                                        "required": "Mui-required",
                                        "root": "MuiInputLabel-root",
                                        "shrink": "MuiInputLabel-shrink",
                                      }
                                    }
                                  >
                                    <WithStyles(ForwardRef(FormLabel))
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      classes={
                                        Object {
                                          "asterisk": "MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "required": "Mui-required",
                                        }
                                      }
                                      data-shrink={false}
                                    >
                                      <ForwardRef(FormLabel)
                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                        classes={
                                          Object {
                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "filled": "MuiFormLabel-filled",
                                            "focused": "Mui-focused Mui-focused",
                                            "required": "Mui-required Mui-required",
                                            "root": "MuiFormLabel-root",
                                          }
                                        }
                                        data-shrink={false}
                                      >
                                        <label
                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                          data-shrink={false}
                                        >
                                          Email
                                        </label>
                                      </ForwardRef(FormLabel)>
                                    </WithStyles(ForwardRef(FormLabel))>
                                  </ForwardRef(InputLabel)>
                                </WithStyles(ForwardRef(InputLabel))>
                                <WithStyles(ForwardRef(OutlinedInput))
                                  fullWidth={true}
                                  labelWidth={0}
                                  name="email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="email"
                                  value=""
                                >
                                  <ForwardRef(OutlinedInput)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiOutlinedInput-inputSelect",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={true}
                                    labelWidth={0}
                                    name="email"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="email"
                                    value=""
                                  >
                                    <WithStyles(ForwardRef(InputBase))
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "inputSelect": "MuiOutlinedInput-inputSelect",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": null,
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputComponent="input"
                                      multiline={false}
                                      name="email"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      renderPrefix={[Function]}
                                      type="email"
                                      value=""
                                    >
                                      <ForwardRef(InputBase)
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "focused": "Mui-focused Mui-focused",
                                            "formControl": "MuiInputBase-formControl",
                                            "fullWidth": "MuiInputBase-fullWidth",
                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                            "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        multiline={false}
                                        name="email"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        renderPrefix={[Function]}
                                        type="email"
                                        value=""
                                      >
                                        <div
                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                          onClick={[Function]}
                                        >
                                          <WithStyles(ForwardRef(NotchedOutline))
                                            className="MuiOutlinedInput-notchedOutline"
                                            labelWidth={0}
                                            notched={false}
                                          >
                                            <ForwardRef(NotchedOutline)
                                              className="MuiOutlinedInput-notchedOutline"
                                              classes={
                                                Object {
                                                  "legend": "PrivateNotchedOutline-legend-215",
                                                  "root": "PrivateNotchedOutline-root-214",
                                                }
                                              }
                                              labelWidth={0}
                                              notched={false}
                                              theme={
                                                Object {
                                                  "breakpoints": Object {
                                                    "between": [Function],
                                                    "down": [Function],
                                                    "keys": Array [
                                                      "xs",
                                                      "sm",
                                                      "md",
                                                      "lg",
                                                      "xl",
                                                    ],
                                                    "only": [Function],
                                                    "up": [Function],
                                                    "values": Object {
                                                      "lg": 1280,
                                                      "md": 960,
                                                      "sm": 600,
                                                      "xl": 1920,
                                                      "xs": 0,
                                                    },
                                                    "width": [Function],
                                                  },
                                                  "direction": "ltr",
                                                  "mixins": Object {
                                                    "gutters": [Function],
                                                    "toolbar": Object {
                                                      "@media (min-width:0px) and (orientation: landscape)": Object {
                                                        "minHeight": 48,
                                                      },
                                                      "@media (min-width:600px)": Object {
                                                        "minHeight": 64,
                                                      },
                                                      "minHeight": 56,
                                                    },
                                                  },
                                                  "overrides": Object {},
                                                  "palette": Object {
                                                    "action": Object {
                                                      "active": "rgba(0, 0, 0, 0.54)",
                                                      "disabled": "rgba(0, 0, 0, 0.26)",
                                                      "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                      "hover": "rgba(0, 0, 0, 0.08)",
                                                      "hoverOpacity": 0.08,
                                                      "selected": "rgba(0, 0, 0, 0.14)",
                                                    },
                                                    "augmentColor": [Function],
                                                    "background": Object {
                                                      "default": "#fafafa",
                                                      "paper": "#fff",
                                                    },
                                                    "common": Object {
                                                      "black": "#000",
                                                      "white": "#fff",
                                                    },
                                                    "contrastThreshold": 3,
                                                    "divider": "rgba(0, 0, 0, 0.12)",
                                                    "error": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#d32f2f",
                                                      "light": "#e57373",
                                                      "main": "#f44336",
                                                    },
                                                    "getContrastText": [Function],
                                                    "grey": Object {
                                                      "100": "#f5f5f5",
                                                      "200": "#eeeeee",
                                                      "300": "#e0e0e0",
                                                      "400": "#bdbdbd",
                                                      "50": "#fafafa",
                                                      "500": "#9e9e9e",
                                                      "600": "#757575",
                                                      "700": "#616161",
                                                      "800": "#424242",
                                                      "900": "#212121",
                                                      "A100": "#d5d5d5",
                                                      "A200": "#aaaaaa",
                                                      "A400": "#303030",
                                                      "A700": "#616161",
                                                    },
                                                    "primary": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#303f9f",
                                                      "light": "#7986cb",
                                                      "main": "#3f51b5",
                                                    },
                                                    "secondary": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#c51162",
                                                      "light": "#ff4081",
                                                      "main": "#f50057",
                                                    },
                                                    "text": Object {
                                                      "disabled": "rgba(0, 0, 0, 0.38)",
                                                      "hint": "rgba(0, 0, 0, 0.38)",
                                                      "primary": "rgba(0, 0, 0, 0.87)",
                                                      "secondary": "rgba(0, 0, 0, 0.54)",
                                                    },
                                                    "tonalOffset": 0.2,
                                                    "type": "light",
                                                  },
                                                  "props": Object {},
                                                  "shadows": Array [
                                                    "none",
                                                    "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                    "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                    "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                    "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                    "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                    "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                    "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                    "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                    "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                    "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                    "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                    "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                    "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                    "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                    "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                    "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                    "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                    "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                                  ],
                                                  "shape": Object {
                                                    "borderRadius": 4,
                                                  },
                                                  "spacing": [Function],
                                                  "transitions": Object {
                                                    "create": [Function],
                                                    "duration": Object {
                                                      "complex": 375,
                                                      "enteringScreen": 225,
                                                      "leavingScreen": 195,
                                                      "short": 250,
                                                      "shorter": 200,
                                                      "shortest": 150,
                                                      "standard": 300,
                                                    },
                                                    "easing": Object {
                                                      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                    },
                                                    "getAutoHeightDuration": [Function],
                                                  },
                                                  "typography": Object {
                                                    "body1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00938em",
                                                      "lineHeight": 1.5,
                                                    },
                                                    "body2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.01071em",
                                                      "lineHeight": 1.43,
                                                    },
                                                    "button": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.02857em",
                                                      "lineHeight": 1.75,
                                                      "textTransform": "uppercase",
                                                    },
                                                    "caption": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.75rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.03333em",
                                                      "lineHeight": 1.66,
                                                    },
                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                    "fontSize": 14,
                                                    "fontWeightBold": 700,
                                                    "fontWeightLight": 300,
                                                    "fontWeightMedium": 500,
                                                    "fontWeightRegular": 400,
                                                    "h1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "6rem",
                                                      "fontWeight": 300,
                                                      "letterSpacing": "-0.01562em",
                                                      "lineHeight": 1,
                                                    },
                                                    "h2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "3.75rem",
                                                      "fontWeight": 300,
                                                      "letterSpacing": "-0.00833em",
                                                      "lineHeight": 1,
                                                    },
                                                    "h3": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "3rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0em",
                                                      "lineHeight": 1.04,
                                                    },
                                                    "h4": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "2.125rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00735em",
                                                      "lineHeight": 1.17,
                                                    },
                                                    "h5": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1.5rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0em",
                                                      "lineHeight": 1.33,
                                                    },
                                                    "h6": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1.25rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.0075em",
                                                      "lineHeight": 1.6,
                                                    },
                                                    "htmlFontSize": 16,
                                                    "overline": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.75rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.08333em",
                                                      "lineHeight": 2.66,
                                                      "textTransform": "uppercase",
                                                    },
                                                    "pxToRem": [Function],
                                                    "round": [Function],
                                                    "subtitle1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00938em",
                                                      "lineHeight": 1.75,
                                                    },
                                                    "subtitle2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.00714em",
                                                      "lineHeight": 1.57,
                                                    },
                                                  },
                                                  "zIndex": Object {
                                                    "appBar": 1100,
                                                    "drawer": 1200,
                                                    "mobileStepper": 1000,
                                                    "modal": 1300,
                                                    "snackbar": 1400,
                                                    "tooltip": 1500,
                                                  },
                                                }
                                              }
                                            >
                                              <fieldset
                                                aria-hidden={true}
                                                className="PrivateNotchedOutline-root-214 MuiOutlinedInput-notchedOutline"
                                                style={
                                                  Object {
                                                    "paddingLeft": 8,
                                                  }
                                                }
                                              >
                                                <legend
                                                  className="PrivateNotchedOutline-legend-215"
                                                  style={
                                                    Object {
                                                      "width": 0.01,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "&#8203;",
                                                      }
                                                    }
                                                  />
                                                </legend>
                                              </fieldset>
                                            </ForwardRef(NotchedOutline)>
                                          </WithStyles(ForwardRef(NotchedOutline))>
                                          <input
                                            aria-invalid={false}
                                            className="MuiInputBase-input MuiOutlinedInput-input"
                                            disabled={false}
                                            name="email"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            type="email"
                                            value=""
                                          />
                                        </div>
                                      </ForwardRef(InputBase)>
                                    </WithStyles(ForwardRef(InputBase))>
                                  </ForwardRef(OutlinedInput)>
                                </WithStyles(ForwardRef(OutlinedInput))>
                              </div>
                            </ForwardRef(FormControl)>
                          </WithStyles(ForwardRef(FormControl))>
                        </ForwardRef(TextField)>
                      </WithStyles(ForwardRef(TextField))>
                    </TextField>
                  </Field>
                </div>
              </Styled(MuiBox)>
              <Styled(MuiBox)
                mb={2}
              >
                <div
                  className="MuiBox-root MuiBox-root-216"
                >
                  <Field
                    fieldType="text"
                    formikProps={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                      }
                    }
                    fullWidth={true}
                    label="Password"
                    name="password"
                    type="password"
                    variant="outlined"
                  >
                    <TextField
                      errors={Object {}}
                      fullWidth={true}
                      handleBlur={[Function]}
                      handleChange={[Function]}
                      label="Password"
                      name="password"
                      touched={Object {}}
                      type="password"
                      values={
                        Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        }
                      }
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(TextField))
                        error={false}
                        fullWidth={true}
                        label="Password"
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        value=""
                        variant="outlined"
                      >
                        <ForwardRef(TextField)
                          classes={
                            Object {
                              "root": "MuiTextField-root",
                            }
                          }
                          error={false}
                          fullWidth={true}
                          label="Password"
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="password"
                          value=""
                          variant="outlined"
                        >
                          <WithStyles(ForwardRef(FormControl))
                            className="MuiTextField-root"
                            error={false}
                            fullWidth={true}
                            required={false}
                            variant="outlined"
                          >
                            <ForwardRef(FormControl)
                              className="MuiTextField-root"
                              classes={
                                Object {
                                  "fullWidth": "MuiFormControl-fullWidth",
                                  "marginDense": "MuiFormControl-marginDense",
                                  "marginNormal": "MuiFormControl-marginNormal",
                                  "root": "MuiFormControl-root",
                                }
                              }
                              error={false}
                              fullWidth={true}
                              required={false}
                              variant="outlined"
                            >
                              <div
                                className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                              >
                                <WithStyles(ForwardRef(InputLabel))>
                                  <ForwardRef(InputLabel)
                                    classes={
                                      Object {
                                        "animated": "MuiInputLabel-animated",
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "filled": "MuiInputLabel-filled",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInputLabel-formControl",
                                        "marginDense": "MuiInputLabel-marginDense",
                                        "outlined": "MuiInputLabel-outlined",
                                        "required": "Mui-required",
                                        "root": "MuiInputLabel-root",
                                        "shrink": "MuiInputLabel-shrink",
                                      }
                                    }
                                  >
                                    <WithStyles(ForwardRef(FormLabel))
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      classes={
                                        Object {
                                          "asterisk": "MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "required": "Mui-required",
                                        }
                                      }
                                      data-shrink={false}
                                    >
                                      <ForwardRef(FormLabel)
                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                        classes={
                                          Object {
                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "filled": "MuiFormLabel-filled",
                                            "focused": "Mui-focused Mui-focused",
                                            "required": "Mui-required Mui-required",
                                            "root": "MuiFormLabel-root",
                                          }
                                        }
                                        data-shrink={false}
                                      >
                                        <label
                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                          data-shrink={false}
                                        >
                                          Password
                                        </label>
                                      </ForwardRef(FormLabel)>
                                    </WithStyles(ForwardRef(FormLabel))>
                                  </ForwardRef(InputLabel)>
                                </WithStyles(ForwardRef(InputLabel))>
                                <WithStyles(ForwardRef(OutlinedInput))
                                  fullWidth={true}
                                  labelWidth={0}
                                  name="password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <ForwardRef(OutlinedInput)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiOutlinedInput-inputSelect",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={true}
                                    labelWidth={0}
                                    name="password"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <WithStyles(ForwardRef(InputBase))
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "inputSelect": "MuiOutlinedInput-inputSelect",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": null,
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputComponent="input"
                                      multiline={false}
                                      name="password"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      renderPrefix={[Function]}
                                      type="password"
                                      value=""
                                    >
                                      <ForwardRef(InputBase)
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "focused": "Mui-focused Mui-focused",
                                            "formControl": "MuiInputBase-formControl",
                                            "fullWidth": "MuiInputBase-fullWidth",
                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                            "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        multiline={false}
                                        name="password"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        renderPrefix={[Function]}
                                        type="password"
                                        value=""
                                      >
                                        <div
                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                          onClick={[Function]}
                                        >
                                          <WithStyles(ForwardRef(NotchedOutline))
                                            className="MuiOutlinedInput-notchedOutline"
                                            labelWidth={0}
                                            notched={false}
                                          >
                                            <ForwardRef(NotchedOutline)
                                              className="MuiOutlinedInput-notchedOutline"
                                              classes={
                                                Object {
                                                  "legend": "PrivateNotchedOutline-legend-215",
                                                  "root": "PrivateNotchedOutline-root-214",
                                                }
                                              }
                                              labelWidth={0}
                                              notched={false}
                                              theme={
                                                Object {
                                                  "breakpoints": Object {
                                                    "between": [Function],
                                                    "down": [Function],
                                                    "keys": Array [
                                                      "xs",
                                                      "sm",
                                                      "md",
                                                      "lg",
                                                      "xl",
                                                    ],
                                                    "only": [Function],
                                                    "up": [Function],
                                                    "values": Object {
                                                      "lg": 1280,
                                                      "md": 960,
                                                      "sm": 600,
                                                      "xl": 1920,
                                                      "xs": 0,
                                                    },
                                                    "width": [Function],
                                                  },
                                                  "direction": "ltr",
                                                  "mixins": Object {
                                                    "gutters": [Function],
                                                    "toolbar": Object {
                                                      "@media (min-width:0px) and (orientation: landscape)": Object {
                                                        "minHeight": 48,
                                                      },
                                                      "@media (min-width:600px)": Object {
                                                        "minHeight": 64,
                                                      },
                                                      "minHeight": 56,
                                                    },
                                                  },
                                                  "overrides": Object {},
                                                  "palette": Object {
                                                    "action": Object {
                                                      "active": "rgba(0, 0, 0, 0.54)",
                                                      "disabled": "rgba(0, 0, 0, 0.26)",
                                                      "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                      "hover": "rgba(0, 0, 0, 0.08)",
                                                      "hoverOpacity": 0.08,
                                                      "selected": "rgba(0, 0, 0, 0.14)",
                                                    },
                                                    "augmentColor": [Function],
                                                    "background": Object {
                                                      "default": "#fafafa",
                                                      "paper": "#fff",
                                                    },
                                                    "common": Object {
                                                      "black": "#000",
                                                      "white": "#fff",
                                                    },
                                                    "contrastThreshold": 3,
                                                    "divider": "rgba(0, 0, 0, 0.12)",
                                                    "error": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#d32f2f",
                                                      "light": "#e57373",
                                                      "main": "#f44336",
                                                    },
                                                    "getContrastText": [Function],
                                                    "grey": Object {
                                                      "100": "#f5f5f5",
                                                      "200": "#eeeeee",
                                                      "300": "#e0e0e0",
                                                      "400": "#bdbdbd",
                                                      "50": "#fafafa",
                                                      "500": "#9e9e9e",
                                                      "600": "#757575",
                                                      "700": "#616161",
                                                      "800": "#424242",
                                                      "900": "#212121",
                                                      "A100": "#d5d5d5",
                                                      "A200": "#aaaaaa",
                                                      "A400": "#303030",
                                                      "A700": "#616161",
                                                    },
                                                    "primary": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#303f9f",
                                                      "light": "#7986cb",
                                                      "main": "#3f51b5",
                                                    },
                                                    "secondary": Object {
                                                      "contrastText": "#fff",
                                                      "dark": "#c51162",
                                                      "light": "#ff4081",
                                                      "main": "#f50057",
                                                    },
                                                    "text": Object {
                                                      "disabled": "rgba(0, 0, 0, 0.38)",
                                                      "hint": "rgba(0, 0, 0, 0.38)",
                                                      "primary": "rgba(0, 0, 0, 0.87)",
                                                      "secondary": "rgba(0, 0, 0, 0.54)",
                                                    },
                                                    "tonalOffset": 0.2,
                                                    "type": "light",
                                                  },
                                                  "props": Object {},
                                                  "shadows": Array [
                                                    "none",
                                                    "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                    "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                    "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                    "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                    "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                    "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                    "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                    "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                    "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                    "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                    "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                    "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                    "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                    "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                    "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                    "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                    "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                    "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                                  ],
                                                  "shape": Object {
                                                    "borderRadius": 4,
                                                  },
                                                  "spacing": [Function],
                                                  "transitions": Object {
                                                    "create": [Function],
                                                    "duration": Object {
                                                      "complex": 375,
                                                      "enteringScreen": 225,
                                                      "leavingScreen": 195,
                                                      "short": 250,
                                                      "shorter": 200,
                                                      "shortest": 150,
                                                      "standard": 300,
                                                    },
                                                    "easing": Object {
                                                      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                    },
                                                    "getAutoHeightDuration": [Function],
                                                  },
                                                  "typography": Object {
                                                    "body1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00938em",
                                                      "lineHeight": 1.5,
                                                    },
                                                    "body2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.01071em",
                                                      "lineHeight": 1.43,
                                                    },
                                                    "button": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.02857em",
                                                      "lineHeight": 1.75,
                                                      "textTransform": "uppercase",
                                                    },
                                                    "caption": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.75rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.03333em",
                                                      "lineHeight": 1.66,
                                                    },
                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                    "fontSize": 14,
                                                    "fontWeightBold": 700,
                                                    "fontWeightLight": 300,
                                                    "fontWeightMedium": 500,
                                                    "fontWeightRegular": 400,
                                                    "h1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "6rem",
                                                      "fontWeight": 300,
                                                      "letterSpacing": "-0.01562em",
                                                      "lineHeight": 1,
                                                    },
                                                    "h2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "3.75rem",
                                                      "fontWeight": 300,
                                                      "letterSpacing": "-0.00833em",
                                                      "lineHeight": 1,
                                                    },
                                                    "h3": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "3rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0em",
                                                      "lineHeight": 1.04,
                                                    },
                                                    "h4": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "2.125rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00735em",
                                                      "lineHeight": 1.17,
                                                    },
                                                    "h5": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1.5rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0em",
                                                      "lineHeight": 1.33,
                                                    },
                                                    "h6": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1.25rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.0075em",
                                                      "lineHeight": 1.6,
                                                    },
                                                    "htmlFontSize": 16,
                                                    "overline": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.75rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.08333em",
                                                      "lineHeight": 2.66,
                                                      "textTransform": "uppercase",
                                                    },
                                                    "pxToRem": [Function],
                                                    "round": [Function],
                                                    "subtitle1": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "1rem",
                                                      "fontWeight": 400,
                                                      "letterSpacing": "0.00938em",
                                                      "lineHeight": 1.75,
                                                    },
                                                    "subtitle2": Object {
                                                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                      "fontSize": "0.875rem",
                                                      "fontWeight": 500,
                                                      "letterSpacing": "0.00714em",
                                                      "lineHeight": 1.57,
                                                    },
                                                  },
                                                  "zIndex": Object {
                                                    "appBar": 1100,
                                                    "drawer": 1200,
                                                    "mobileStepper": 1000,
                                                    "modal": 1300,
                                                    "snackbar": 1400,
                                                    "tooltip": 1500,
                                                  },
                                                }
                                              }
                                            >
                                              <fieldset
                                                aria-hidden={true}
                                                className="PrivateNotchedOutline-root-214 MuiOutlinedInput-notchedOutline"
                                                style={
                                                  Object {
                                                    "paddingLeft": 8,
                                                  }
                                                }
                                              >
                                                <legend
                                                  className="PrivateNotchedOutline-legend-215"
                                                  style={
                                                    Object {
                                                      "width": 0.01,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "&#8203;",
                                                      }
                                                    }
                                                  />
                                                </legend>
                                              </fieldset>
                                            </ForwardRef(NotchedOutline)>
                                          </WithStyles(ForwardRef(NotchedOutline))>
                                          <input
                                            aria-invalid={false}
                                            className="MuiInputBase-input MuiOutlinedInput-input"
                                            disabled={false}
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            type="password"
                                            value=""
                                          />
                                        </div>
                                      </ForwardRef(InputBase)>
                                    </WithStyles(ForwardRef(InputBase))>
                                  </ForwardRef(OutlinedInput)>
                                </WithStyles(ForwardRef(OutlinedInput))>
                              </div>
                            </ForwardRef(FormControl)>
                          </WithStyles(ForwardRef(FormControl))>
                        </ForwardRef(TextField)>
                      </WithStyles(ForwardRef(TextField))>
                    </TextField>
                  </Field>
                </div>
              </Styled(MuiBox)>
              <WithStyles(ForwardRef(FormControlLabel))
                control={
                  <Field
                    color="primary"
                    fieldType="checkbox"
                    formikProps={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "email": "",
                          "password": "",
                          "rememberMe": false,
                        },
                      }
                    }
                    name="rememberMe"
                  />
                }
                label="Remember me"
              >
                <ForwardRef(FormControlLabel)
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "label": "MuiFormControlLabel-label",
                      "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                      "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                      "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                      "root": "MuiFormControlLabel-root",
                    }
                  }
                  control={
                    <Field
                      color="primary"
                      fieldType="checkbox"
                      formikProps={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "password": "",
                            "rememberMe": false,
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "values": Object {
                            "email": "",
                            "password": "",
                            "rememberMe": false,
                          },
                        }
                      }
                      name="rememberMe"
                    />
                  }
                  label="Remember me"
                >
                  <label
                    className="MuiFormControlLabel-root"
                  >
                    <Field
                      color="primary"
                      fieldType="checkbox"
                      formikProps={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "password": "",
                            "rememberMe": false,
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "values": Object {
                            "email": "",
                            "password": "",
                            "rememberMe": false,
                          },
                        }
                      }
                      name="rememberMe"
                    >
                      <Checkbox
                        color="primary"
                        handleChange={[Function]}
                        name="rememberMe"
                        values={
                          Object {
                            "email": "",
                            "password": "",
                            "rememberMe": false,
                          }
                        }
                      >
                        <WithStyles(ForwardRef(Checkbox))
                          color="primary"
                          name="rememberMe"
                          onChange={[Function]}
                          value={false}
                        >
                          <ForwardRef(Checkbox)
                            classes={
                              Object {
                                "checked": "Mui-checked",
                                "colorPrimary": "MuiCheckbox-colorPrimary",
                                "colorSecondary": "MuiCheckbox-colorSecondary",
                                "disabled": "Mui-disabled",
                                "indeterminate": "MuiCheckbox-indeterminate",
                                "root": "MuiCheckbox-root",
                              }
                            }
                            color="primary"
                            name="rememberMe"
                            onChange={[Function]}
                            value={false}
                          >
                            <WithStyles(ForwardRef(SwitchBase))
                              checkedIcon={<Memo />}
                              classes={
                                Object {
                                  "checked": "Mui-checked",
                                  "disabled": "Mui-disabled",
                                  "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                                }
                              }
                              color="primary"
                              icon={<Memo />}
                              inputProps={
                                Object {
                                  "data-indeterminate": false,
                                }
                              }
                              name="rememberMe"
                              onChange={[Function]}
                              type="checkbox"
                              value={false}
                            >
                              <ForwardRef(SwitchBase)
                                checkedIcon={<Memo />}
                                classes={
                                  Object {
                                    "checked": "PrivateSwitchBase-checked-230 Mui-checked",
                                    "disabled": "PrivateSwitchBase-disabled-231 Mui-disabled",
                                    "input": "PrivateSwitchBase-input-232",
                                    "root": "PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary",
                                  }
                                }
                                color="primary"
                                icon={<Memo />}
                                inputProps={
                                  Object {
                                    "data-indeterminate": false,
                                  }
                                }
                                name="rememberMe"
                                onChange={[Function]}
                                type="checkbox"
                                value={false}
                              >
                                <WithStyles(ForwardRef(IconButton))
                                  className="PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary"
                                  color="primary"
                                  component="span"
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  tabIndex={null}
                                >
                                  <ForwardRef(IconButton)
                                    className="PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary"
                                    classes={
                                      Object {
                                        "colorInherit": "MuiIconButton-colorInherit",
                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                        "edgeStart": "MuiIconButton-edgeStart",
                                        "label": "MuiIconButton-label",
                                        "root": "MuiIconButton-root",
                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                      }
                                    }
                                    color="primary"
                                    component="span"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <WithStyles(ForwardRef(ButtonBase))
                                      centerRipple={true}
                                      className="MuiIconButton-root PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                      component="span"
                                      disabled={false}
                                      focusRipple={true}
                                      onBlur={[Function]}
                                      onFocus={[Function]}
                                      tabIndex={null}
                                    >
                                      <ForwardRef(ButtonBase)
                                        centerRipple={true}
                                        className="MuiIconButton-root PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                        classes={
                                          Object {
                                            "disabled": "Mui-disabled",
                                            "focusVisible": "Mui-focusVisible",
                                            "root": "MuiButtonBase-root",
                                          }
                                        }
                                        component="span"
                                        disabled={false}
                                        focusRipple={true}
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        tabIndex={null}
                                      >
                                        <span
                                          aria-disabled={false}
                                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-229 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                          onBlur={[Function]}
                                          onDragLeave={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          onMouseDown={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseUp={[Function]}
                                          onTouchEnd={[Function]}
                                          onTouchMove={[Function]}
                                          onTouchStart={[Function]}
                                          tabIndex={null}
                                        >
                                          <span
                                            className="MuiIconButton-label"
                                          >
                                            <ForwardRef>
                                              <WithStyles(ForwardRef(SvgIcon))>
                                                <ForwardRef(SvgIcon)
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                      "colorError": "MuiSvgIcon-colorError",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                      "root": "MuiSvgIcon-root",
                                                    }
                                                  }
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                    />
                                                  </svg>
                                                </ForwardRef(SvgIcon)>
                                              </WithStyles(ForwardRef(SvgIcon))>
                                            </ForwardRef>
                                            <input
                                              className="PrivateSwitchBase-input-232"
                                              data-indeterminate={false}
                                              name="rememberMe"
                                              onChange={[Function]}
                                              type="checkbox"
                                              value={false}
                                            />
                                          </span>
                                          <NoSsr>
                                            <WithStyles(undefined)
                                              center={true}
                                            >
                                              <ForwardRef(TouchRipple)
                                                center={true}
                                                classes={
                                                  Object {
                                                    "child": "MuiTouchRipple-child",
                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                    "ripple": "MuiTouchRipple-ripple",
                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                    "root": "MuiTouchRipple-root",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="MuiTouchRipple-root"
                                                >
                                                  <TransitionGroup
                                                    childFactory={[Function]}
                                                    component={null}
                                                    exit={true}
                                                  />
                                                </span>
                                              </ForwardRef(TouchRipple)>
                                            </WithStyles(undefined)>
                                          </NoSsr>
                                        </span>
                                      </ForwardRef(ButtonBase)>
                                    </WithStyles(ForwardRef(ButtonBase))>
                                  </ForwardRef(IconButton)>
                                </WithStyles(ForwardRef(IconButton))>
                              </ForwardRef(SwitchBase)>
                            </WithStyles(ForwardRef(SwitchBase))>
                          </ForwardRef(Checkbox)>
                        </WithStyles(ForwardRef(Checkbox))>
                      </Checkbox>
                    </Field>
                    <WithStyles(ForwardRef(Typography))
                      className="MuiFormControlLabel-label"
                      component="span"
                    >
                      <ForwardRef(Typography)
                        className="MuiFormControlLabel-label"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="span"
                        theme={
                          Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "hover": "rgba(0, 0, 0, 0.08)",
                                "hoverOpacity": 0.08,
                                "selected": "rgba(0, 0, 0, 0.14)",
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                              "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                              "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.04,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.17,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.33,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "tooltip": 1500,
                            },
                          }
                        }
                      >
                        <span
                          className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                        >
                          Remember me
                        </span>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </label>
                </ForwardRef(FormControlLabel)>
              </WithStyles(ForwardRef(FormControlLabel))>
              <WithStyles(ForwardRef(Button))
                color="primary"
                fullWidth={true}
                type="submit"
                variant="contained"
              >
                <ForwardRef(Button)
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                    }
                  }
                  color="primary"
                  fullWidth={true}
                  type="submit"
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    type="submit"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      type="submit"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-fullWidth"
                        disabled={false}
                        onBlur={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="submit"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          <WithI18n
                            id="Sign in"
                          >
                            <I18n
                              update={true}
                              withHash={true}
                            >
                              <Trans
                                id="Sign in"
                              >
                                <Render
                                  value="Sign in"
                                >
                                  Sign in
                                </Render>
                              </Trans>
                            </I18n>
                          </WithI18n>
                        </span>
                        <NoSsr>
                          <WithStyles(undefined)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(undefined)>
                        </NoSsr>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </form>
          </Component>
        </Form>
      </Formik>
    </RawLoginForm>
  </Connect(RawLoginForm)>
</Provider>
`;
